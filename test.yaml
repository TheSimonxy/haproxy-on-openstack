heat_template_version: 2015-10-15

description: >
   A simple Heat template that creates a VM, hooks it up to a private network
   and associates a floating ip from an external network to the VM. It also includes
   allowed_address_pairs integration.

parameters:
  key_name:
    type: string
    description: SSH Key Pair
    constraints:
      - custom_constraint: nova.keypair
  flavor:
    type: string
    description: Flavor to use for the haproxy server
    default: t1.small
    constraints:
      - custom_constraint: nova.flavor
  image:
    type: string
    description: Image ID or image name to use for the haproxy server
    default: "CentOS 7"
    constraints:
      - custom_constraint: glance.image
  router:
    type: string
    description: Name of the router used to connect to the external network
    default: InternetGW
  external_network:
    type: string
    description: Name of the external network used for floating ip addresses
    default: internet
  vrrp_subnet_cidr:
    type: string
    description: VRRP Subnet CIDR address
    default: 172.16.1.0/24
  vrrp_subnet_dns:
    type: string
    description: DNS Servers to configure on the vrrp subnet
    default: 8.8.8.8
  haproxy_ports:
    type: comma_delimited_list
    label: ports
    default: "80,443"
  email_address:
    type: string
    description: Email address to receive keepalived notifications
  smtp_server:
    type: string
    description: IP Address of SMTP Server
    default: 127.0.0.1

resources:
  vrrp_net:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: vrrp_net

  vrrp_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: vrrp_subnet
      network: { get_resource: vrrp_net }
      allocation_pools:
        - start: 
            list_join: ['.', [ str_split: ['.', { get_param: vrrp_subnet_cidr }, 0], str_split: ['.', { get_param: vrrp_subnet_cidr }, 1], str_split: ['.', { get_param: vrrp_subnet_cidr }, 2], '20' ]] 
          end: 
            list_join: ['.', [ str_split: ['.', { get_param: vrrp_subnet_cidr }, 0], str_split: ['.', { get_param: vrrp_subnet_cidr }, 1], str_split: ['.', { get_param: vrrp_subnet_cidr }, 2], '200' ]]
      cidr: { get_param: vrrp_subnet_cidr }
      dns_nameservers: [ { get_param: vrrp_subnet_dns } ]
      gateway_ip: 
        list_join: ['.', [ str_split: ['.', { get_param: vrrp_subnet_cidr }, 0], str_split: ['.', { get_param: vrrp_subnet_cidr }, 1], str_split: ['.', { get_param: vrrp_subnet_cidr }, 2], '1' ]]
      ip_version: 4

  vrrp_gw:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_param: router }
      subnet: { get_resource: vrrp_subnet }

  haproxy_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      name: haproxy_secgroup
      rules:
        - direction: ingress
          protocol: 112
          remote_group_id:
          remote_mode: remote_group_id
        - direction: ingress
          protocol: icmp
          remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
          protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 80
          port_range_max: 80

  ssh_ext_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      name: ssh_ext_secgroup
      rules:
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 22
          port_range_max: 22

  haproxy_vip_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: vrrp_net }
      fixed_ips:
        - ip_address:
            list_join: ['.', [ str_split: ['.', { get_param: vrrp_subnet_cidr }, 0], str_split: ['.', { get_param: vrrp_subnet_cidr }, 1], str_split: ['.', { get_param: vrrp_subnet_cidr }, 2], '201' ]]
      security_groups:
        - { get_resource: haproxy_secgroup }

  haproxy_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: haproxy_vip_port }
    depends_on: vrrp_gw

  haproxy_1_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: vrrp_net }
      allowed_address_pairs:
        - ip_address:
            list_join: ['.', [ str_split: ['.', { get_param: vrrp_subnet_cidr }, 0], str_split: ['.', { get_param: vrrp_subnet_cidr }, 1], str_split: ['.', { get_param: vrrp_subnet_cidr }, 2], '201' ]]
      fixed_ips:
        - subnet_id: { get_resource: vrrp_subnet }
      security_groups:
        - { get_resource: haproxy_secgroup }
        - { get_resource: ssh_ext_secgroup }

  haproxy_2_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: vrrp_net }
      allowed_address_pairs:
        - ip_address:
            list_join: ['.', [ str_split: ['.', { get_param: vrrp_subnet_cidr }, 0], str_split: ['.', { get_param: vrrp_subnet_cidr }, 1], str_split: ['.', { get_param: vrrp_subnet_cidr }, 2], '201' ]]
      fixed_ips:
        - subnet_id: { get_resource: vrrp_subnet }
      security_groups:
        - { get_resource: haproxy_secgroup }
        - { get_resource: ssh_ext_secgroup }

  haproxy_cluster:
    type: OS::Nova::ServerGroup
    properties:
      name: Haproxy Cluster
      policies: ['anti-affinity']

  haproxy_1_server:
    type: OS::Nova::Server
    properties:
      name: haproxy01
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      scheduler_hints: { group: { get_resource: haproxy_cluster }}
      networks:
        - port: { get_resource: haproxy_1_port }
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: init}

  haproxy_2_server:
    type: OS::Nova::Server
    properties:
      name: haproxy02
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      scheduler_hints: { group: { get_resource: haproxy_cluster }}
      networks:
        - port: { get_resource: haproxy_2_port }
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: init}

  # boot_config:
  #   type: Heat::InstallConfigAgent

  # Install, configure and enable the Heat configuration agent
  config_agent:
    type: collect-config-setup/install_config_agent_centos_yum.yaml

  # Collect the results from a set of resources
  init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      # - config: {get_resource: set_hostname}
      # - config: {get_resource: included_files}
      # - config: {get_resource: rhn_register}
      # - config: {get_resource: set_extra_repos}
      # - config: {get_resource: set_extra_docker_repos}
      # - config: {get_resource: host_update}
      - config: {get_attr: [config_agent, config]}
        type: multipart
      # - config: {get_resource: bastion_boot}


  keepalived_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: state
      - name: priority
      outputs:
      - name: result
      config: 
        str_replace:
          template: |
            #!/bin/sh
            if [ -f /etc/redhat-release ];then
              yum -y install keepalived
            elif [ "$(grep -i ubuntu /etc/lsb-release)" ];then
              apt-get install keepalived
            else
              echo "The OS detection has failed."
              exit 1
            fi
            cat > /etc/keepalived/keepalived.conf <<-EOF
            vrrp_instance vrrp_group_1 {
                state $state
                interface eth0
                garp_master_delay 10
                virtual_router_id 1
                priority $priority
                advert_int 1
                authentication {
                    auth_type PASS
                    auth_pass SUperS3creT
                }
                virtual_ipaddress {
                    $vip
                }
            }
            EOF
            systemctl enable keepalived
            systemctl restart keepalived
          params:
            $vip: { get_attr: [haproxy_vip_port, fixed_ips, 0, ip_address] }

  master_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: CFN_SIGNAL
      config:
        get_resource: keepalived_config
      server:
        get_resource: haproxy_1_server
      input_values:
        state: MASTER
        priority: 100

  slave_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: CFN_SIGNAL
      config:
        get_resource: keepalived_config
      server:
        get_resource: haproxy_2_server
      input_values:
        state: BACKUP
        priority: 50

  haproxy_install:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: 
        str_replace:
          template: |
            #!/bin/sh
            if [ -f /etc/redhat-release ];then
              yum -y install haproxy
            elif [ "$(grep -i ubuntu /etc/lsb-release)" ];then
              apt-get install haproxy
            else
              echo "The OS detection has failed."
              exit 1
            fi

            cat > /etc/haproxy/haproxy.cfg <<-EOF
            global
                log /dev/log    local0
                log /dev/log    local1 notice
                stats socket /var/run/haproxy.sock mode 600 level admin
                stats timeout 2m
                chroot /var/lib/haproxy
                user haproxy
                group haproxy
                daemon
                tune.ssl.default-dh-param 2048

            defaults
                log     global
                mode    http
                option  httplog
                option  dontlognull
                option  forwardfor
                option  http-server-close
                timeout connect 5000
                timeout client 50000
                timeout server 50000

            frontend http
                bind $vip:80
                default_backend nodes

            backend nodes
                server pfsense 192.168.2.254:80 check
            EOF
            sysctl -w net.ipv4.ip_forward=1
            sysctl -w net.ipv4.ip_nonlocal_bind=1
            systemctl enable haproxy
            systemctl restart haproxy
          params:
            $vip: { get_attr: [haproxy_vip_port, fixed_ips, 0, ip_address] }

  haproxy_deployment:
    type: OS::Heat::SoftwareDeploymentGroup
    properties:
      signal_transport: CFN_SIGNAL
      config:
        get_resource: haproxy_install
      servers:
        haproxy01: { get_resource: haproxy_1_server }
        haproxy02: { get_resource: haproxy_2_server }

outputs:
  master_result:
    value:
      get_attr: [master_deployment, result]
  master_stdout:
    value:
      get_attr: [master_deployment, deploy_stdout]
  slave_result:
    value:
      get_attr: [slave_deployment, result]
  haproxy_result:
    value: 
      get_attr: [haproxy_deployment, result]